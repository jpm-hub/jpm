name: Build and Release

on:
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  PROJECT_NAME: 'jpm'

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
            binary_name: jpm
            archive_name: jpm-linux-amd64.zip
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
            binary_name: jpm
            archive_name: jpm-linux-arm64.zip
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
            binary_name: jpm
            archive_name: jpm-darwin-amd64.zip
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
            binary_name: jpm
            archive_name: jpm-darwin-arm64.zip
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            binary_name: jpm.exe
            archive_name: jpm-windows-amd64.zip
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64
            binary_name: jpm.exe
            archive_name: jpm-windows-arm64.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
        
      - name: Get name from code and check against last tag
        id: version
        run: |
          # Extract version from consts.go
          VERSION=$(grep -o 'VERSION = "[0-9]\+\.[0-9]\+\.[0-9]\+"' common/consts.go | head -1 | cut -d'"' -f2)
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from consts.go"
            exit 1
          fi
          # Get the latest tag from git, strip leading 'v' if present
          LAST_TAG=$(git fetch --tags >/dev/null 2>&1; git tag --sort=-creatordate | head -1)
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, continuing."
          else
            # Remove leading v from both for comparison
            VERSION_CMP=${VERSION#v}
            LAST_TAG_CMP=${LAST_TAG#v}
            if [ "$VERSION_CMP" = "$LAST_TAG_CMP" ]; then
              echo "Error: Version in code ($VERSION) is the same as the last tag ($LAST_TAG)."
              exit 1
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=jpm-$VERSION-${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
          if [ -n "$LAST_TAG" ]; then
            echo "Last tag: $LAST_TAG"
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "Building for ${{ matrix.os }}-${{ matrix.arch }}"
          if [[ "${{ matrix.os }}" != "windows" ]]; then
            go build -ldflags="-s -w" -o ${{ steps.version.outputs.name }}/bin/jpm jpm.go
          else
            go build -ldflags="-s -w" -o ${{ matrix.binary_name }} jpm.go
          fi
          ls -la

      - name: Create release archive
        run: |
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            # Windows: create ZIP file with jpm.exe, jpx.cmd, and jpx
            mv jpx jpxsh
            cp jpxsh/jpx.cmd . && cp jpxsh/jpx .  # Copy files to current dir
            zip ${{ matrix.archive_name }} ${{ matrix.binary_name }} jpx.cmd jpx
            rm -rf jpx.cmd jpx jpxsh
          else
            zip ${{ steps.version.outputs.name }}.zip ${{ steps.version.outputs.name }}
          fi
          ls -la *.zip 2>/dev/null || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update setup.cmd version
        run: |
          # Extract version from consts.go
          VERSION=$(grep -o 'VERSION = "[0-9]\+\.[0-9]\+\.[0-9]\+"' common/consts.go | head -1 | cut -d'"' -f2)
          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "Updating setup.cmd with version: $VERSION"
          # Update the version in setup.cmd using awk (more reliable)
          awk -v ver="$VERSION" '{if (/^set VERSION=/) print "set VERSION=" ver; else print}' setup.cmd > setup.cmd.tmp && mv setup.cmd.tmp setup.cmd
          echo "setup.cmd updated successfully $VERSION"
          grep "set VERSION" setup.cmd

      - name: Get version from code and check against last tag
        id: version
        run: |
          # Extract version from consts.go
          VERSION=$(grep -o 'VERSION = "[0-9]\+\.[0-9]\+\.[0-9]\+"' common/consts.go | head -1 | cut -d'"' -f2)
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from consts.go"
            exit 1
          fi
          # Get the latest tag from git, strip leading 'v' if present
          LAST_TAG=$(git fetch --tags >/dev/null 2>&1; git tag --sort=-creatordate | head -1)
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, continuing."
          else
            # Remove leading v from both for comparison
            VERSION_CMP=${VERSION#v}
            LAST_TAG_CMP=${LAST_TAG#v}
            if [ "$VERSION_CMP" = "$LAST_TAG_CMP" ]; then
              echo "Error: Version in code ($VERSION) is the same as the last tag ($LAST_TAG)."
              exit 1
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
          if [ -n "$LAST_TAG" ]; then
            echo "Last tag: $LAST_TAG"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find . -type f -name -o -name "*.zip" | sort
          cd artifacts
          echo "removing .zip files and ignoring errors"
          rm *.zip || true
          echo "changing dir names to remove .zip"
          mv jpm-${{ steps.version.outputs.version }}-windows-amd64.zip jpm-windows-amd64
          mv jpm-${{ steps.version.outputs.version }}-windows-arm64.zip jpm-windows-arm64
          mv jpm-${{ steps.version.outputs.version }}-darwin-amd64.zip jpm-darwin-amd64
          mv jpm-${{ steps.version.outputs.version }}-darwin-arm64.zip jpm-darwin-arm64
          mv jpm-${{ steps.version.outputs.version }}-linux-amd64.zip jpm-linux-amd64
          mv jpm-${{ steps.version.outputs.version }}-linux-arm64.zip jpm-linux-arm64
          echo "moving files out of their directories"
          mv jpm-windows-amd64/* .
          mv jpm-windows-arm64/* .
          mv jpm-darwin-amd64/* .
          mv jpm-darwin-arm64/* .
          mv jpm-linux-amd64/* .
          mv jpm-linux-arm64/* .
          ls -la

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## JPM - JVM Package Manager
            
            ### Supported Platforms
            - **Linux**: AMD64, ARM64
            - **macOS**: Intel (AMD64), Apple Silicon (ARM64)
            - **Windows**: AMD64, ARM64
            
            ### Downloads
            - `jpm-${{ steps.version.outputs.version }}-linux-amd64.zip` - Linux AMD64
            - `jpm-${{ steps.version.outputs.version }}-linux-arm64.zip` - Linux ARM64
            - `jpm-${{ steps.version.outputs.version }}-darwin-amd64.zip` - macOS Intel
            - `jpm-${{ steps.version.outputs.version }}-darwin-arm64.zip` - macOS Apple Silicon
            - `jpm-${{ steps.version.outputs.version }}-windows-amd64.zip` - Windows AMD64
            - `jpm-${{ steps.version.outputs.version }}-windows-arm64.zip` - Windows ARM64
            
            ### Installation
            ```bash
            # Linux/macOS
            tar -xzf jpm-<version>-<platform>-<arch>.zip
            sudo mv jpm-<version>-<platform>-<arch>/bin/jpm /usr/local/bin/
            
            # Windows
            # Extract the ZIP and add to PATH
            ```
          files: |
            artifacts/*.zip
            setup.cmd
          draft: false
          prerelease: false
          overwrite_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
